#!/usr/bin/env ruby
require 'talker_bot/autorun'

class Evil
  attr_accessor :client, :recursing

  COMMANDS = {
    :help => "Print out this help message",
    :commands => "List all available commands",
    :die => "Kill the evil bot",
    :flood => [:count, :delay, 
      "Flood the channel with :count messages with :delay second(s) delay between messages"],
    :recurse => [:really,
      "Do a recursive flood on the channel. This gets out of hand really quick. Set :really as a confirmation"],
    :stop_recurse => "Attempt to halt the recurse flood",
    :stop_flood => "End a currently running flood test",
    :boogie => "Do the boogie, duh"
  }

  DANCE_STEPS = [
    ":D|-<",
    ":D\\-<",
    ":D/-<",
    ":D>-<",
    ":D<-<",
    ":D|-|",
  ]

  def on_message(sender, content, event)
    puts  event.inspect

    if self.recursing
      client.send_message content
    end

    case content
    when /^evil: (.*)/
      puts "Message: #{event.inspect}"

      input = $1.split(" ")
      message = nil

      if COMMANDS.has_key?(input[0].to_sym)
        puts "Found command for: #{input[0]}"
        begin
          message = self.__send__(*input)
        rescue Exception => ex
          puts "Error: #{ex.message}"
          message = "Nice try, you can't kill me that easily!"
        end
      else
        message = "I'm sorry #{sender['name']}, but I'm afraid I can't do that."
      end

      client.send_message message if message
    end
  end

  def die
    EM.stop
  end

  def help
<<END
  This is Evil Bot. I'm here to cause pain and destruction.
  To see a list of commands, ask me for 'commands' 
END
  end

  def commands
    command_list = []
    COMMANDS.each do |key, info|
      args = []
      desc = info

      if info.is_a?(Array)
        args = info[0..-2]
        desc = info[-1]
      end

      command_list << "\t#{key} #{args.join(" ")}: #{desc}"
    end

    return <<-END
  The commands I currently support are:
  #{command_list.join("\n")}
END
  end

  def flood(times, delay)
    times = times.to_f
    delay = delay.to_f
    @count = 0

    @timer = EM::PeriodicTimer.new(delay) { 
      if @count < times
        @count += 1
        client.send_message "FLOOD: Message # #{@count}"
      else
        @timer.cancel
      end
    }
    "Starting flood of #{times} messages, one every #{delay} seconds"
  end

  def stop_flood
    @timer.cancel if @timer
    @timer = nil

    "Flood stopped"
  end

  def recurse(really = false)
    return "You don't really want to do this." unless really
    @recursing = true
    
    "Starting recurse, you asked for it"
  end

  def stop_recurse
    @recursing = false

    "Recurse finished, good day"
  end

  def boogie
    @step_count = 0
    @timer = EM::PeriodicTimer.new(1) do
      client.send_message DANCE_STEPS[@step_count]
      @step_count = (@step_count + 1) % DANCE_STEPS.length
    end

    "DANCE! Once you start, YOU CAN'T STOP!"
  end

end

use Evil.new
