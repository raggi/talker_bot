#!/usr/bin/env ruby
require 'talker_bot/autorun'

class Evil
  attr_accessor :client

  COMMANDS = {
    :help => "Print out this help message",
    :commands => "List all available commands",
    :die => "Kill the evil bot",
    :flood => [:count, :delay, 
      "Flood the channel with :count messages with :delay second(s) delay between messages"],
    :recurse => [:really,
      "Do a recursive flood on the channel. This gets out of hand really quick. Set :really as a confirmation"]
  }

  def on_message(sender, content, event)
    puts  event.inspect
    case content
    when /^evil: (.*)/
      puts "Message: #{event.inspect}"

      input = $1.split(" ")
      message = nil

      if COMMANDS.has_key?(input[0].to_sym)
        puts "Found command for: #{input[0]}"
        begin
          message = self.__send__(*input)
        rescue Exception => ex
          puts "Error: #{ex.message}"
          message = "Nice try, you can't kill me that easily!"
        end
      else
        message = "I'm sorry #{sender['name']}, but I'm afraid I can't do that."
      end

      client.send_message message if message
    end
  end

  def help
<<END
  This is Evil Bot. I'm here to cause pain and destruction.
  To see a list of commands, ask me for 'commands' 
END
  end

  def commands
    command_list = []
    COMMANDS.each do |key, info|
      args = []
      desc = info

      if info.is_a?(Array)
        args = info[0..-2]
        desc = info[-1]
      end

      command_list << "\t#{key} #{args.join(" ")}: #{desc}"
    end

    return <<-END
  The commands I currently support are:
  #{command_list.join("\n")}
END
  end

  def do_flood(times, delay)
  end

end

use Evil.new
